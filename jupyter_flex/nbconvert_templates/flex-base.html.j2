{%- extends flex_extends_from -%}
{% import "macros.j2" as macros %}

{# Global variables #}
{% set debug = false %}
{% set dashboard = {} %}

{# Default parameters for the dashboard #}
{% set default_title = nb.metadata.get("title", "") or resources["metadata"]["name"] %}
{% set kernel_display_name = nb.metadata.get('kernelspec', {}).get('display_name', '') %}
{% set params = {"title": default_title, "kernel_name": kernel_display_name, "orientation": "", "vertical_layout": "fill"} %}

{# Overwrite parameters if there is a cell tagged "parameters" #}
{# We only look at params prefixed with flex_ #}
{% for cell in nb.cells %}
    {% set tags = cell.metadata.get("tags", []) %}
    {% if "parameters" in tags %}
        {% for line in cell["source"].split("\n") %}
            {% if line | trim | length %}
                {% if line.startswith("flex_") %}
                    {% if line.split("=") | length == 2 %}
                        {% set key = line.split("=")[0] | trim  %}
                        {% set key = key["flex_" | length:]  %}
                        {% set value = line.split("=")[1] | replace("\\\"", "|?|") | replace("\"", " ") | replace("|?|", "\"") | trim %}
                        {% set _ = params.update({key: value})  %}
                    {% endif %}
                {% endif %}
            {% endif %}
        {% endfor %}
    {% endif %}
{% endfor %}

{# If orientation not defined set the default based on the vertical_layout #}
{% if not params.get("orientation") %}
    {% if params.get("vertical_layout") == "scroll" %}
        {% set _ = params.update({"orientation": "rows"}) %}
    {% else %}
        {# Default is vertical_layout == fill #}
        {% set _ = params.update({"orientation": "columns"}) %}
    {% endif %}
{% endif %}

{# Set default flex-direction based on orientation and vertical_layout #}
{% if params.get("vertical_layout") == "scroll" %}
    {% if params["orientation"] == "columns" %}
        {% set _ = params.update({"page_flex_direction": "row"}) %}
        {% set _ = params.update({"section_flex_direction": "column"}) %}
    {% else %}
        {# Default for is orientation == rows #}
        {% set _ = params.update({"page_flex_direction": "column"}) %}
        {% set _ = params.update({"section_flex_direction": "row"}) %}
    {% endif %}
{% else %}
    {# Default is vertical_layout == fill #}

    {% if params["orientation"] == "rows" %}
        {% set _ = params.update({"page_flex_direction": "column"}) %}
        {% set _ = params.update({"section_flex_direction": "row"}) %}
    {% else %}
        {# Default is orientation == column #}
        {% set _ = params.update({"page_flex_direction": "row"}) %}
        {% set _ = params.update({"section_flex_direction": "column"}) %}
    {% endif %}
{% endif %}

{# ------------------------------------------------------------------------- #}
{# Macros (that need to be in this file) #}
{# ------------------------------------------------------------------------- #}

{%- macro render_card(card, header=true, wrapper="", class="") -%}
{# Render cells as a card with optional title and footer #}
    {% set card_extra_classes = macros.join_all_items_with_prefix(card.tags, "class=", " ") %}
    <div class="card {{ class }} {{ card_extra_classes }}" style="flex: {{ card.size }} {{ card.size }} 0px;">
        {# The cell Title #}
        {% if header and (card.header | trim | length) %}
            <div class="card-header d-flex justify-content-between align-items-baseline">
                <h6>{{ card.header }}</h6>
                {% if card.help | trim | length %}
                    <span tabindex="0" class="help-button" data-toggle="popover" data-trigger="focus" data-content='{{ render_cell(card.help) }}'>
                        <i class="material-icons">help_outline</i>
                    </span>
                {% endif %}
            </div>
        {% endif %}

        {# The cell content #}
        <div class="card-body d-flex flex-column">
            {% if card.cells | length %}
                {% for cell in card.cells %}
                    {{ render_cell(cell) }}
                {% endfor %}
            {% endif %}
        </div>

        {# The cell footer #}
        {% if card.footer %}
            <div class="card-footer text-muted">{{ render_cell(card.footer) }}</div>
        {% endif %}
    </div>
{% endmacro %}

{% macro render_cell(cell, display="unset") %}
{% block any_cell scoped %}
    {% set cell_tags = cell["metadata"].get("tags", []) %}
    {% set cell_extra_classes = macros.join_all_items_with_prefix(cell_tags, "class=", " ") %}
    <div class="cell-wrapper cell-type-{{ cell.cell_type }} {{ cell_extra_classes }}" style="display: {{ display }};">
        {% if debug %}
            {{ cell }}
        {% else %}
            {{ super() }}
        {% endif %}
    </div>
{% endblock %}
{% endmacro %}

{# ------------------------------------------------------------------------- #}
{# Content #}
{# ------------------------------------------------------------------------- #}

{%- block body -%}

{%- block body_header -%}
{%- endblock body_header -%}

{%- block body_loop -%}

    {% block execute_cells %}
    {% endblock %}

    {# ------------------------------------------------------------------------- #}
    {# Create dashboard structure variable by iterating the notebook cells  #}
    {# ------------------------------------------------------------------------- #}

    {% set _ = dashboard.update({"props": params, "meta": [], "pages": [], "sidebar": {} }) %}
    {% set vars = {} %}
    {% set _ = vars.update({"current_page_dir": params.page_flex_direction}) %}
    {% set _ = vars.update({"current_section_dir": params.section_flex_direction}) %}
    {% set _ = vars.update({"current_page": {} }) %}
    {% set _ = vars.update({"current_section": {} }) %}
    {% set _ = vars.update({"current_card": {} }) %}

    {% for cell in nb.cells %}
        {% set cell_type = cell["cell_type"] %}
        {% set cell_source = cell["source"] %}
        {% set cell_tags = cell.get("metadata", {}).get("tags", []) %}

        {% if cell_type == "markdown" %}

            {% set h1_title = macros.startswith_and_strip(cell_source, "# ") %}
            {% if h1_title %}
                {# Add the current card to the current section #}
                {% if vars.current_card %}
                    {% set _ = vars.current_section["cards"].append(vars.current_card) %}
                {% endif %}

                {# Add current section to page #}
                {% if vars.current_section and vars.current_section %}
                    {% set _ = vars.current_page["sections"].append(vars.current_section) %}
                {% endif %}

                {# Add current page to dashboard before defining a new one #}
                {% if vars.current_page and vars.current_page.sections %}
                    {% set is_sidebar = macros.find_item_startswith(vars.current_page.tags, "sidebar") %}
                    {% if is_sidebar %}
                        {% set _ = dashboard.update({"sidebar": vars.current_page}) %}
                    {% else %}
                        {% set _ = dashboard["pages"].append(vars.current_page) %}
                    {% endif %}
                {% endif %}

                {# Define new current_* objects #}

                {# Overwrite default orientation (if tag) #}
                {% set orientation = macros.find_item_startswith(cell_tags, "orientation=") %}
                {% if orientation %}
                    {% set orientation = orientation["orientation=" | length:] | trim %}
                    {% if orientation == "rows" %}
                        {% set _ = vars.update({"current_page_dir": "column"}) %}
                        {% set _ = vars.update({"current_section_dir": "row"}) %}
                    {% else %}
                        {# Default is "columns" #}
                        {% set _ = vars.update({"current_page_dir": "row"}) %}
                        {% set _ = vars.update({"current_section_dir": "column"}) %}
                    {% endif %}
                {% endif %}

                {% set _ = vars.update({"current_page": {"title": h1_title, "sections": [], "direction": vars.current_page_dir, "tags": cell_tags } }) %}
                {% set _ = vars.update({"current_section": {} }) %}
                {% set _ = vars.update({"current_card": {} }) %}
            {% endif %}

            {% set h2_title = macros.startswith_and_strip(cell_source, "## ") %}
            {% if h2_title %}
                {# If there is no h1 (notebook starts with h2) #}
                {% if not vars.current_page %}
                    {% set _ = vars.update({"current_page": {"title": "", "sections": [], "direction": vars.current_page_dir, "tags": [] } }) %}
                {% endif %}

                {# Add the current card to the current section before defining a new one #}
                {% if vars.current_card %}
                    {% set _ = vars.current_section["cards"].append(vars.current_card) %}
                    {% set _ = vars.update({"current_card": {} }) %}
                {% endif %}

                {# Add current section to page before defining a new one #}
                {% if vars.current_section %}
                    {% set _ = vars.current_page["sections"].append(vars.current_section) %}
                {% endif %}

                {# Create new section and use tags to override defaults #}
                {% set _ = vars.update({"current_section": {"title": h2_title, "cards": [], "direction": vars.current_section_dir, "size": "500", "tags": cell_tags}}) %}

                {# Overwrite default orientation (if tag) #}
                {% set orientation = macros.find_item_startswith(cell_tags, "orientation=") %}
                {% if orientation %}
                    {% set orientation = orientation["orientation=" | length:] | trim %}
                    {% if orientation == "columns" %}
                        {% set _ = vars.current_section.update({"direction": "row"}) %}
                    {% elif orientation == "rows" %}
                        {% set _ = vars.current_section.update({"direction": "column"}) %}
                    {% endif %}
                {% endif %}

                {# Overwrite default size (if tag) #}
                {% set size = macros.find_item_startswith(cell_tags, "size=") %}
                {% if size %}
                    {% set size = size["size=" | length:] | trim %}
                    {% set _ = vars.current_section.update({"size": size}) %}
                {% endif %}
            {% endif %}

            {% set h3_title = macros.startswith_and_strip(cell_source, "### ") %}
            {% if h3_title %}
                {# If there is no h1 or h2 (notebook starts with h3) #}
                {% if not vars.current_page %}
                    {% set _ = vars.update({"current_page": {"title": "", "sections": [], "direction": vars.current_page_dir, "tags": [] } }) %}
                {% endif %}
                {% if not vars.current_section %}
                    {% set _ = vars.update({"current_section": {"title": "", "cards": [], "direction": vars.current_section_dir, "size": "500", "tags": []} }) %}
                {% endif %}

                {# If there is a card we add it to the section #}
                {% if vars.current_card %}
                    {% set _ = vars.current_section["cards"].append(vars.current_card) %}
                {% endif %}

                {# Create current_card with values from this cell #}
                {% set _ = vars.update({"current_card": {"header": h3_title, "cells": [], "size": "500", "tags": cell_tags}}) %}

                {# Overwrite default size (if tag) #}
                {% set size = macros.find_item_startswith(cell_tags, "size=") %}
                {% if size %}
                    {% set size = macros.startswith_and_strip(size, "size=") | trim %}
                    {% set _ = vars.current_card.update({"size": size}) %}
                {% endif %}
            {% endif %}

            {% set is_text = macros.find_item_startswith(cell_tags, "text") %}
            {% set is_footer = macros.find_item_startswith(cell_tags, "footer") %}
            {% set is_help = macros.find_item_startswith(cell_tags, "help") %}
            {% if is_text or is_footer or is_help %}
                {# Create current_* objects if notebook starts with a tagged cell #}
                {% if not vars.current_page %}
                    {% set _ = vars.update({"current_page": {"title": "", "direction": params.page_flex_direction, "sections": [] } }) %}
                {% endif %}
                {% if not vars.current_section %}
                    {% set _ = vars.update({"current_section": {"title": "", "cards": [], "direction": vars.current_section_dir, "size": "500", "tags": []}}) %}
                {% endif %}
                {% if not vars.current_card %}
                    {% set _ = vars.update({"current_card": {"header": "", "cells": [], "size": "500", "tags": []}}) %}
                {% endif %}

                {% if is_text %}
                    {% set _ = vars.current_card.cells.append(cell) %}
                {% endif %}

                {% if is_footer %}
                    {% set _ = vars.current_card.update({"footer": cell}) %}
                {% endif %}

                {% if is_help %}
                    {% set _ = vars.current_card.update({"help": cell}) %}
                {% endif %}
            {% endif %}

        {% elif cell_type == "code" %}
            {% set is_meta = macros.find_item_startswith(cell_tags, "meta") %}
            {% set is_inputs = macros.find_item_startswith(cell_tags, "inputs") %}
            {% set is_chart = macros.find_item_startswith(cell_tags, "chart") %}

            {% if is_meta %}
                {# Metadata cells dont create section or pages #}
                {% set _ = dashboard.meta.append(cell) %}
                {% continue %}

            {% elif is_inputs or is_chart %}
                {# Create current_* objects if notebook starts with a tagged cell #}
                {% if not vars.current_page %}
                    {% set _ = vars.update({"current_page": {"title": "", "direction": params.page_flex_direction, "sections": [] } }) %}
                {% endif %}
                {% if not vars.current_section %}
                    {% set _ = vars.update({"current_section": {"title": "", "cards": [], "direction": vars.current_section_dir, "size": "500", "tags": []}}) %}
                {% endif %}
                {% if not vars.current_card %}
                    {% set _ = vars.update({"current_card": {"header": "", "cells": [], "size": "500", "tags": []}}) %}
                {% endif %}

                {# Encode outputs to safely insert them on <script> tags #}
                {% set new_outputs = [] %}
                {% for output in cell.outputs %}
                    {% set _ = new_outputs.append(encoded) %}
                    {% for key, value in output["data"].items() %}
                        {% set encodedValue = value | replace("</script>", "</scr\\ipt>")  %}
                        {% set _ = output["data"].update({key: encodedValue}) %}
                    {% endfor %}
                {% endfor %}

                {% set _ = vars.current_card.cells.append(cell) %}
            {% endif %}
        {% endif %}

    {% endfor %}

    {# Add final page and section #}
    {% set _ = vars.current_section["cards"].append(vars.current_card) %}
    {% set _ = vars.current_page["sections"].append(vars.current_section) %}
    {% set _ = dashboard["pages"].append(vars.current_page) %}

    {% block after_body_loop %}
    {% endblock %}
{%- endblock body_loop -%}

{# ------------------------------------------------------------------------- #}
{# Write the HTML from the dashboard structure #}
{# ------------------------------------------------------------------------- #}

{%- block dashboard_metadata -%}
<script id="jupyter-flex-dashboard" type="application/json">
{{ dashboard | tojson }}
</script>
{%- endblock dashboard_metadata %}

{%- block body_footer -%}
{%- endblock body_footer -%}

{%- endblock body -%}
