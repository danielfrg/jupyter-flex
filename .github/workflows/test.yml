name: test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 5 * * *"
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]
        node-version: ["16"]

    services:
      selenium-hub:
        image: selenium/hub:3.141.59
        ports:
          - 4444:4444
        options: --health-cmd=/opt/bin/check-grid.sh --health-interval=15s --health-timeout=30s --health-retries=5
        volumes:
          - /tmp:/dev/shm

      chrome:
        image: selenium/node-chrome:3.141.59
        env:
          HUB_HOST: selenium-hub
          HUB_PORT: 4444
          SCREEN_WIDTH: 1440
          SCREEN_HEIGHT: 900
        volumes:
          - /tmp:/dev/shm

    env:
      SELENIUM_HUB_HOST: selenium-hub
      SELENIUM_HUB_PORT: 4444
      PYTEST_BASE_URL: http://localhost:8866

    steps:
      - uses: actions/checkout@v2
      - run: git fetch --prune --unshallow

      # ------------------------------------------------------------------------
      # JS

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Load cached node_modules
        id: cached-node_modules
        uses: actions/cache@v2
        with:
          path: js/node_modules
          key: node_modules-${{ runner.os }}-node${{ matrix.node-version }}-${{ hashFiles('js/package*.json') }}

      - name: Install JS deps
        if: steps.cached-node_modules.outputs.cache-hit != 'true'
        run: |
          make npm-install

      - name: Build JS
        run: |
          make download-assets
          make npm-build

      # ------------------------------------------------------------------------
      # Python

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.2.0a2
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-python-env
        uses: actions/cache@v2
        with:
          path: python/.venv
          key: venv-test-${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock', '**/requirements*.txt') }}

      - name: Ensure cache is healthy
        id: cache-reset
        continue-on-error: true
        if: steps.cached-python-env.outputs.cache-hit == 'true'
        run: |
          cd python
          poetry run python --version

      - name: Install Python dependencies
        if: steps.cached-python-env.outputs.cache-hit != 'true' || steps.cache-reset.conclusion != 'success'
        run: |
          cd python
          rm -rf .venv || true
          poetry install --no-interaction --no-root --with test
          source .venv/bin/activate
          pip install -r requirements-examples.txt

      - name: Print Python info
        run: |
          source python/.venv/bin/activate
          which python
          python --version
          which pip
          pip --version
          pip freeze

      - name: Build Python package
        run: |
          source python/.venv/bin/activate
          make build-python

      - name: Install package
        run: |
          source python/.venv/bin/activate
          cd python
          pip install dist/*.tar.gz
          pip freeze

      # ------------------------------------------------------------------------
      # Tests

      - name: Verify Selenium Hub
        run: |
          curl http://localhost:4444/

      - name: Serve Voila
        run: |
          source python/.venv/bin/activate
          make voila-examples &

      - name: Verify Voila
        run: |
          # ls /__t/Python/3.7.7/x64/share/jupyter/voila/templates
          curl http://localhost:8866/

      - name: Install other dependencies
        run: |
          source python/.venv/bin/activate
          make download-testdata

      - name: Run tests
        run: |
          source python/.venv/bin/activate
          make pytest-all
          make report

      - name: Upload package
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: pkg-py${{ matrix.python-version }}
          path: python/dist

      - name: Upload test results
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: test-results-py${{ matrix.python-version }}
          path: python/test-results

      - name: Codecov
        uses: codecov/codecov-action@v2
        with:
          file: python/coverage.xml
